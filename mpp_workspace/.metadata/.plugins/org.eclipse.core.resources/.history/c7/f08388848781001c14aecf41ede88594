package level1;
	
import javafx.application.Application;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.stage.Stage;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.geometry.Insets;
import javafx.geometry.Pos;


public class StringUtility extends Application {
	
	@Override
	public void start(Stage primaryStage) {
		int lblWidthMin = 170;
		int txtWidth = 200;
		int lblHeight = 25;
		try {
			GridPane grid = new GridPane(); 
			grid.setAlignment(Pos.TOP_CENTER);
			grid.getStyleClass().add("pane");
			
			Button btnCount = new Button("Count Letters");
			btnCount.setPrefWidth(130);
			Button btnReverse = new Button("Reverse Letters");
			btnReverse.setPrefWidth(130);
			Button btnRmvDup = new Button("Remove Duplicates");
			btnRmvDup.setPrefWidth(130);
						
			Label spacer = new Label("");
			spacer.setPrefSize(lblWidthMin, lblHeight);
					
			Label lblInput = new Label();
			lblInput.setText("Input");		
			lblInput.setPrefSize(lblWidthMin, lblHeight);				
			Label lblOutput = new Label();
			lblOutput.setText("Output");
			lblOutput.setPrefSize(lblWidthMin, lblHeight);
			TextField txtInput = new TextField();
			txtInput.setPrefSize(txtWidth, lblHeight);
			TextField txtOutput = new TextField();
			txtOutput.setPrefSize(txtWidth, lblHeight);
			
			VBox vboxLeft =new VBox();
			vboxLeft.setAlignment(Pos.CENTER_RIGHT);
			vboxLeft.getChildren().add(btnCount);
			vboxLeft.getChildren().add(btnReverse);
			vboxLeft.getChildren().add(btnRmvDup);			
			grid.add(vboxLeft, 0, 1);
			
			VBox vboxRight =new VBox();
			vboxRight.setAlignment(Pos.CENTER_LEFT);
			vboxRight.getChildren().add(lblInput);
			vboxRight.getChildren().add(txtInput);
			vboxRight.getChildren().add(lblOutput);	
			vboxRight.getChildren().add(txtOutput);	
			grid.add(vboxRight, 1, 1);
			
			btnCount.setOnAction(new EventHandler<ActionEvent>() {
				@Override
				public void handle(ActionEvent e) {
					
				}
			});
			
			btnReverse.setOnAction(new EventHandler<ActionEvent>() {

				@Override
				public void handle(ActionEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
			});
			
			btnRmvDup.setOnAction(new EventHandler<ActionEvent>() {

				@Override
				public void handle(ActionEvent arg0) {
					// TODO Auto-generated method stub
					
				}
				
			});
			
			Scene scene = new Scene(grid,500,170);	
			scene.getStylesheets().add(getClass().getResource("stringutility.css").toExternalForm());
			primaryStage.setTitle("String Utility");
			primaryStage.setScene(scene);
			primaryStage.show();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	public int getCharCount(String str) {
		return (int) str.chars().filter(ch -> ch != ' ').count();
	}
	
	public String reverseLetter(String str) {
		String output = "";		
		int len = str.length();
		for(int i = len-1; i >= 0; i--){
			output += str.charAt(i);
		}
		return output;
	}
	
	public String removeDuplicate(String str) {		
			int len = str.length();
			StringBuilder nodups = new StringBuilder();
			nodups.append(str.charAt(0));
			for(int i = 1; i < len; ++i) {
				boolean dupFound = false;
				for(int j = 0; j < i; ++j)                                                                                                                                  {
					if(str.charAt(j) == str.charAt(i)) {
						dupFound = true;
						break;
					}
				}
				if(!dupFound) {
					nodups.append(str.charAt(i));
				}
			}
			return nodups.toString();
			
		
	}
	
	public static void main(String[] args) {
		launch(args);
	}
}
