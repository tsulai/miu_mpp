package level3_no7;

import java.util.Arrays;
import java.util.DoubleSummaryStatistics;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.stream.Collectors;

public class Test {

	public static void main(String[] args) {
	/// initialize array of Employees
	   Employee[] employees = {
			      new Employee("Jason", "Red", 5000, "IT"),
			      new Employee("Ashley", "Green", 7600, "IT"),
			      new Employee("Matthew", "Indigo", 3587.5, "Sales"),
			      new Employee("James", "Indigo", 4700.77, "Marketing"),
			      new Employee("Luke", "Indigo", 6200, "IT"),
			      new Employee("Jason", "Blue", 3200, "Sales"),
			      new Employee("Wendy", "Brown", 4236.4, "Marketing")};

	   // get List view of the Employees
	   List<Employee> list = Arrays.asList(employees);
	   //---------------------------------------------
	   // group Employees by department (level 3)
	   //---------------------------------------------
	   System.out.printf("%nEmployees by department:%n");
	   //Map is just the component that has key,value feature to store data
	    
	   Map<String, Long> employeeCountByDepartment = 
			   list.stream()
			   	.collect(Collectors.groupingBy(Employee::getDepartment, 
			   			TreeMap::new, Collectors.counting()));

	   employeeCountByDepartment.forEach(
			 (department, count)  -> System.out.printf(
					 "%s has %d employee(s)%n", department, count));
	   
	   System.out.println("");
	   //--------------------	  
	   //7.a)  Print out each department and the average salary for the department.
	   //--------------------
	   Map<String, Double> avgSalaryByDepartment = 
			   list.stream()
			   	.collect(Collectors.groupingBy(Employee::getDepartment,
			   			TreeMap::new, Collectors.averagingDouble(Employee::getSalary)));
	   
	   avgSalaryByDepartment.forEach(
				 (department, salary)  -> System.out.printf(
						 "%s has %.2f average salary %n", department, salary));
	   
	   System.out.println("");
	   //--------------------	  
	   //7.b)  Print out each department and the maximum salary for the department.
	   //--------------------
	   Map<String, DoubleSummaryStatistics> maxSalaryByDepartment = 
			   list.stream()
			   	.collect(Collectors.groupingBy(Employee::getDepartment,
			   			TreeMap::new, Collectors.summarizingDouble(Employee::getSalary)));
	   
	   maxSalaryByDepartment.forEach(
				 (department, salary)  -> System.out.printf(
						 "%s has %.2f maximum salary %n", department, salary.getMax()));
	   
	   //--------------------	  
	   //7.c)  Print out each department and all of the employees who work at that department.  
	   //--------------------
	   Map<String, List<Employee>> employeesByDepartment = 
			   list.stream()
			   	.collect(Collectors.groupingBy(Employee::getDepartment, 
			   			TreeMap::new, Collectors.toList()));

	   employeesByDepartment.forEach(
			 (department, empList)  -> {
				 System.out.printf("%s has %n", department); 
				 	empList.forEach(System.out::println)
			 }
			 	
					 ));
	}

}
